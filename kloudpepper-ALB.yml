AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create ALB"

Parameters:
  EnvironmentType:
    Type: String

  EnvironmentName:
    Type: String

  VpcID:
    Type: String

  PublicSubnet1:
    Type: String

  PublicSubnet2:
    Type: String

  ALBSecurityGroup:
    Type: String


Conditions:
  isProdEnvironmentType: !Equals [!Ref EnvironmentType, prod]


Resources:
# Create target group container App
  TargetGroupAPP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/"
      Port: 8554
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 10
      TargetType: "ip"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 2
      VpcId: !Ref VpcID
      Name: !Sub ${EnvironmentName}-APP-TG
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "60"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"

# Create Public ALB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - 
          Key: "access_logs.s3.enabled"
          Value: "false"
        - 
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - 
          Key: "deletion_protection.enabled"
          Value: "false" # if prod=true
        - 
          Key: "routing.http2.enabled"
          Value: "true"
        - 
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: !If [isProdEnvironmentType, "true", "false"]
      Tags:
        - 
          Key: Environment
          Value: !Ref EnvironmentName
        - 
          Key: Name
          Value: !Sub ${EnvironmentName}-ALB

# Create HTTP listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Wrong path"
            StatusCode: "503"

# Create forwarding rules
  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupAPP
                Weight: 1 # 100%
            TargetGroupStickinessConfig: 
              Enabled: false
      Conditions:
        - Field: "path-pattern"
          Values:
            - "/demo*"
      ListenerArn: !Ref HTTPListener
      Priority: 1


Outputs:
  AlbDNSName:
    Description: Export ALB name for CodeBuild
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
    Export:
      Name: !Sub ${EnvironmentName}-AlbDNSName

  TargetGroupAPP:
    Description: Export Target Group for container App
    Value: !Ref TargetGroupAPP